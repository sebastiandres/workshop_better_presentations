---
execute:
  echo: true
format:
  revealjs:
    width: 1245
    height: 700
    controls: true
    menu: true
    slide-number: true
    transition: fade
    auto-stretch: false
    embed-resources: false
    toc: false
    center: true
    preview-links: false
    theme:
        - simple
        - style/style_background.scss
---

## { .custom-title }

&#32; 

::: {.notes}
- Why visualizations? -> DataSaurus & Python Logo
- When visualizations?
- The story in your data
- Activity 1: What stories can we find in this data?
- Matplotlib journey (adviced course)
- Exploratory data viz vs explanatory data viz
- Things to learn:
  - Themes and colors (palettes)
  - Fig and ax
  - Opacity & layers
  - Texts, titles and subtitles
  - Arrows and annotations
- Activity 2: Improve this plot.
- Top 8 graphs frequently used
- Activity 3: What is the best plot for this story?

- Help yourself: allow to make drop in replacements in data. You'll reuse your code more.
:::

---

## { .custom-title }
::: {style="position: absolute; left: 500px; top: 500px; width:2000px; background-color: #ffffff; padding: 10px; border-radius: 5px;"}
[Python and Data Storytelling <br> to create and deliver better presentations]{style="font-size: 40px; font-weight: bold; margin: 0px"} <br>
[Sebasti√°n Flores, EuroPyCon 2025]{style="font-size: 25px;"}
:::

---

## { .custom-title }
::: {style="position: absolute; left: 700px; top: 550px; width:2000px; background-color: #ffffff; padding: 10px; border-radius: 5px;"}
[Part 1 - Block 4]{style="font-size: 20px; margin: 0px;"} <br>
[Visualization Quick Wins]{style="font-size: 30px; font-weight: bold; margin: 0px"} <br>
:::

---

## Why visualizations?

Because of Anscombe's quartet and the datasaurus.

---

::: columns
::: {.column width="33%" .fragment}
![Anscombe's quartet](images/P1B4/anscombe.png){fig-align="center"}
:::
::: {.column width="66%" .fragment}
![Datasaurus Dozen](images/P1B4/datasaurus.gif){fig-align="center"}
:::
:::

---

## Quick wins
Let's see some quick wins and code before the coffee break.

---

## Visualization is never "agnostic/neutral"

There is always more than one story within the data:
![](images/P1B4/story_within_data.png){fig-align="center" height="500px"}

---

## Select the story within your data

Be fair and truthful.  
Be aware you're not neutral, and that you are showing part of the data in a given way.

---

## Exploratory Viz != Explanatory Viz

Craft what **YOU** want your audience to see.

Avoid exploratory graphs on your presentation.

---

## Data Exploratory Viz

![](images/P1B2/looker.png){width=400 style="box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19)"}

. . .

![](images/P1B2/tableau.png){.absolute top=125 left=25 width=800 style="box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);"}

. . .

![](images/P1B2/pbi.png){.absolute top=150 left=50 width=800 style="box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);"}

. . .

[Too many options! <br> User **cannot** be responsible of finding your insights.]{ style="background-color: #fff" }

---

Remember: Never use exploratory visualizations on a presentation!

---

### Simplicity is the ultimate sophistication.  

::: {style="text-align: right;"}
[*Leonardo da Vinci*]{.fragment}
:::

---

My references:  

- **Storytelling with data** (book), by Cole Nussbaumer Knaflic
- **Matplotlib Journey** (online course), by Yan Holtz and Joseph Barbier

---

## Simple ideas with high impact

:::{.incremental}
0. Use simpler plots
1. Apply a mis-en-place
2. Annotate your plots
3. Use better colors
4. Develop a progression
:::

---

## 0. Use simpler plots

Avoid using complex/custom plots.  

Most of the time, you can use just 8 types of plots.

---


[CENTER]

![](images/P1B4/common_plots.png){style="width: 70%"}

---

[CHANGE FONT SIZE]

::: columns
::: {.column width="50%" .incremental}
* Number: `directly on your slideware`
* Scatterplot: `plt.scatter`
* Vertical bar: `plt.bar`
* Horizontal bar: `plt.barh`
:::
::: {.column width="50%" .incremental}
* Table: `directly on your slideware`
* Line: `plt.plot` 
* Stacked Vertical bar: `plt.bar` (?)
* Stacked Horizontal bar: `plt.barh` (?)
:::
:::

---

## 1. Mis-en-place
### Prepare your data before plotting

- Create a clean dataset 
- If necesary: cast, aggroupate and simplify the data before plotting.

--- 

## 2. Mixed bag of tricks

* Remove any unnecesary bounding box or line (spine of ax)
* Plot clean axes
* Avoid any rotated text
* Learn the difference between fig and ax
* Prefer to use `ax.text` and `fig.text` over `title`, `subtitle`, `suptitle`, `xlabel`, `ylabel`, etc.

---

## 3. Annotate your plots

- Remove the "legend" (if possible): annotate contextually.
- Use "highligth_text" to mix font sizes, weigths and colors.

---

## 4. Use better colors

- Don't use regular colors: use a palette
- Options:
  - Matplotlib's palette: 13 options
  - Pypalette: +2600 curated palettes
- "Inspire" yourself from great examples

---

## 5. Develop a progression

- Don't reveal the final plot inmediately
- Use a progression to train the audience into how to read
- Revel the plot step by step and explain each step
- Keep the control of the attention at all steps

---

## Let's code!